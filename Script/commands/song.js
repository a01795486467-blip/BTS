const axios = require("axios");
const fs = require('fs');
const path = require('path'); // Path ‡¶™‡¶∞‡¶ø‡¶ö‡¶æ‡¶≤‡¶®‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá

// --- Helper Functions ---

/**
 * GitHub ‡¶•‡ßá‡¶ï‡ßá ‡¶¨‡ßá‡¶∏ API URL ‡¶´‡ßá‡¶ö ‡¶ï‡¶∞‡ßá‡•§
 * @returns {Promise<string>} ‡¶¨‡ßá‡¶∏ API URL.
 */
const baseApiUrl = async () => {
  try {
    const base = await axios.get(
      `https://raw.githubusercontent.com/Blankid018/D1PT0/main/baseApiUrl.json`,
    );
    // ‡¶Ø‡¶¶‡¶ø api ‡¶™‡ßç‡¶∞‡¶™‡¶æ‡¶∞‡ßç‡¶ü‡¶ø ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡ßá, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶è‡¶∞‡¶∞ ‡¶•‡ßç‡¶∞‡ßã ‡¶ï‡¶∞‡¶¨‡ßá
    if (!base.data || !base.data.api) {
        throw new Error("Invalid response structure from base API URL.");
    }
    return base.data.api;
  } catch (error) {
    console.error("Error fetching base API URL:", error.message);
    // ‡¶´‡ßá‡¶á‡¶≤ ‡¶π‡¶≤‡ßá ‡¶¨‡¶æ ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø ‡¶π‡¶≤‡ßá ‡¶Ö‡¶™‡¶æ‡¶∞‡ßá‡¶∂‡¶® ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶è‡¶∞‡¶∞ ‡¶•‡ßç‡¶∞‡ßã ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá
    throw new Error("Could not fetch the base API URL.");
  }
};

/**
 * ‡¶è‡¶ï‡¶ü‡¶ø URL ‡¶•‡ßá‡¶ï‡ßá ‡¶´‡¶æ‡¶á‡¶≤ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßá, ‡¶≤‡ßã‡¶ï‡¶æ‡¶≤ ‡¶™‡¶æ‡¶•‡ßá ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡ßá, ‡¶è‡¶¨‡¶Ç ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∞‡¶ø‡¶°‡ßá‡¶¨‡¶≤ ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡ßá‡•§
 * @param {string} url ‡¶Ø‡ßá URL ‡¶•‡ßá‡¶ï‡ßá ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§
 * @param {string} fileName ‡¶Ø‡ßá ‡¶®‡¶æ‡¶Æ‡ßá ‡¶´‡¶æ‡¶á‡¶≤‡¶ü‡¶ø ‡¶∏‡ßá‡¶≠ ‡¶π‡¶¨‡ßá (‡¶Ø‡ßá‡¶Æ‡¶®: 'audio.mp3')‡•§
 * @returns {Promise<fs.ReadStream>} ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶´‡¶æ‡¶á‡¶≤‡ßá‡¶∞ ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∞‡¶ø‡¶°‡ßá‡¶¨‡¶≤ ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ‡•§
 */
async function dipto(url, fileName) {
  const filePath = path.join(__dirname, fileName);
  try {
    // 1. ArrayBuffer ‡¶π‡¶ø‡¶∏‡¶æ‡¶¨‡ßá ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶°
    const response = await axios.get(url, {
      responseType: "arraybuffer"
    });

    // 2. ‡¶≤‡ßã‡¶ï‡¶æ‡¶≤ ‡¶´‡¶æ‡¶á‡¶≤‡ßá ‡¶∏‡ßá‡¶≠
    fs.writeFileSync(filePath, Buffer.from(response.data));
    
    // 3. ReadStream ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶®
    return fs.createReadStream(filePath);
  } catch (err) {
    // ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶¨‡¶æ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶∏‡ßá‡¶≠‡¶ø‡¶Ç ‡¶è‡¶∞‡¶∞ ‡¶π‡¶≤‡ßá
    console.error("Error in dipto (file download):", err.message);
    // ‡¶è‡¶∞‡¶∞ ‡¶•‡ßç‡¶∞‡ßã ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶Ü‡¶ó‡ßá ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶Ø‡ßá ‡¶≤‡ßã‡¶ï‡¶æ‡¶≤ ‡¶´‡¶æ‡¶á‡¶≤‡¶ü‡¶ø ‡¶Æ‡ßÅ‡¶õ‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá (‡¶Ø‡¶¶‡¶ø ‡¶Ü‡¶Ç‡¶∂‡¶ø‡¶ï ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶π‡ßü‡ßá ‡¶•‡¶æ‡¶ï‡ßá)
    if (fs.existsSync(filePath)) {
        fs.unlinkSync(filePath); 
    }
    throw err;
  }
}

/**
 * ‡¶è‡¶ï‡¶ü‡¶ø URL ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ ‡¶π‡¶ø‡¶∏‡¶æ‡¶¨‡ßá ‡¶´‡¶æ‡¶á‡¶≤ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßá ‡¶è‡¶¨‡¶Ç ‡¶è‡¶∞ path ‡¶™‡ßç‡¶∞‡¶™‡¶æ‡¶∞‡ßç‡¶ü‡¶ø ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßá‡•§
 * ‡¶è‡¶ü‡¶ø ‡¶Æ‡ßÇ‡¶≤‡¶§ Facebook API-‡¶è‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶ö‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶Æ‡ßá‡¶ï‡¶æ‡¶®‡¶ø‡¶ú‡¶Æ‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡ßÉ‡¶§ ‡¶π‡¶Ø‡¶º‡•§
 * @param {string} url ‡¶Ø‡ßá URL ‡¶•‡ßá‡¶ï‡ßá ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§
 * @param {string} fileName ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡¶æ ‡¶´‡¶æ‡¶á‡¶≤‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ‡•§
 * @returns {Promise<import('axios').AxiosResponse['data'] & {path: string}>} 'path' ‡¶™‡ßç‡¶∞‡¶™‡¶æ‡¶∞‡ßç‡¶ü‡¶ø ‡¶∏‡¶π ‡¶∞‡ßá‡¶∏‡¶™‡¶®‡ßç‡¶∏ ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ‡•§
 */
async function diptoSt(url, fileName) {
  try {
    const response = await axios.get(url, {
      responseType: "stream"
    });
    // ‡¶¨‡¶ü ‡¶´‡ßç‡¶∞‡ßá‡¶Æ‡¶ì‡ßü‡¶æ‡¶∞‡ßç‡¶ï ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø 'path' ‡¶™‡ßç‡¶∞‡¶™‡¶æ‡¶∞‡ßç‡¶ü‡¶ø ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ
    response.data.path = fileName; 
    return response.data;
  } catch (err) {
    console.error("Error in diptoSt (stream download):", err.message);
    throw err;
  }
}

// --- Module Configuration ---

module.exports.config = {
  name: "song",
  version: "2.1.2", // ‡¶≠‡¶æ‡¶∞‡ßç‡¶∏‡¶® ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá
  aliases: ["music", "play"],
  credits: "RAHAT (Fixed by Gemini)",
  countDown: 5,
  hasPermssion: 0,
  description: "Download audio from YouTube",
  category: "media",
  commandCategory: "media",
  usePrefix: true,
  prefix: true,
  usages: "{pn} [<song name>|<song link>]:" + "\n   Example:" + "\n{pn} chipi chipi chapa chapa"
};

// --- Run Function (Main Command Logic) ---

module.exports.run = async ({
  api,
  args,
  event,
  commandName,
  message
}) => {
  // YouTube URL ‡¶∞‡ßá‡¶ú‡ßá‡¶ï‡ßç‡¶∏ (regex)
  const checkurl = /^(?:https?:\/\/)?(?:m\.|www\.)?(?:youtu\.be\/|youtube\.com\/(?:embed\/|v\/|watch\?v=|watch\?.+&v=|shorts\/))((\w|-){11})(?:\S+)?$/;
  const filePath = path.join(__dirname, 'audio.mp3'); // ‡¶≤‡ßã‡¶ï‡¶æ‡¶≤ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶™‡¶æ‡¶•

  // ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§‡¶ï‡¶∞‡¶£‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶≤‡ßã‡¶ï‡¶æ‡¶≤ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶ï‡ßç‡¶≤‡¶ø‡¶®‡¶Ü‡¶™ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
  const cleanup = () => {
    if (fs.existsSync(filePath)) {
      try {
        fs.unlinkSync(filePath);
      } catch (e) {
        console.error("Failed to delete local file:", e.message);
      }
    }
  };

  try {
    const urlYtb = checkurl.test(args[0]);

    // ‡¶Ø‡¶¶‡¶ø ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø YouTube URL ‡¶π‡ßü
    if (urlYtb) {
      const match = args[0].match(checkurl);
      const videoID = match ? match[1] : null;

      if (!videoID) {
        return api.sendMessage("‚ùå ‡¶™‡ßç‡¶∞‡¶¶‡¶§‡ßç‡¶§ ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶•‡ßá‡¶ï‡ßá ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ID ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§", event.threadID, event.messageID);
      }
      
      const baseUrl = await baseApiUrl();
      
      // API ‡¶•‡ßá‡¶ï‡ßá ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶è‡¶¨‡¶Ç ‡¶§‡¶•‡ßç‡¶Ø ‡¶´‡ßá‡¶ö
      const {
        data: {
          title,
          downloadLink,
          quality
        }
      } = await axios.get(
        `${baseUrl}/ytDl3?link=${videoID}&format=mp3`
      );

      // ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶°‡¶ø‡¶Ç ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú
      await api.sendMessage({
        body: `‚úÖ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶π‡¶ö‡ßç‡¶õ‡ßá: ${title}\n‚Ä¢ Quality: ${quality}`,
      }, event.threadID, event.messageID);
      
      // dipto ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶è‡¶¨‡¶Ç ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ ‡¶§‡ßà‡¶∞‡¶ø
      const audioStream = await dipto(downloadLink, 'audio.mp3'); 

      // ‡¶Ö‡¶°‡¶ø‡¶ì ‡¶´‡¶æ‡¶á‡¶≤ ‡¶∏‡ßá‡¶®‡ßç‡¶° ‡¶è‡¶¨‡¶Ç ‡¶ï‡ßç‡¶≤‡¶ø‡¶®‡¶Ü‡¶™
      return api.sendMessage({
        body: title,
        attachment: audioStream
      }, event.threadID, () => {
        cleanup(); // ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶∏‡ßá‡¶®‡ßç‡¶° ‡¶π‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶™‡¶∞ ‡¶ï‡ßç‡¶≤‡¶ø‡¶®‡¶Ü‡¶™
      }, event.messageID);
    }

    // ‡¶Ø‡¶¶‡¶ø ‡¶ï‡¶ø‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º
    let keyWord = args.join(" ");
    if (!keyWord) {
      return api.sendMessage(`‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶ó‡¶æ‡¶® ‡¶¨‡¶æ YouTube ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶¶‡¶ø‡¶®‡•§\n‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞: ${this.config.usages.replace(/{pn}/g, commandName)}`, event.threadID, event.messageID);
    }

    keyWord = keyWord.includes("?feature=share") ? keyWord.replace("?feature=share", "") : keyWord;
    const maxResults = 6;
    const baseUrl = await baseApiUrl();
    
    // ‡¶ó‡¶æ‡¶® ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡¶ï‡¶∞‡¶æ
    const searchResponse = (await axios.get(`${baseUrl}/ytFullSearch?songName=${encodeURIComponent(keyWord)}`)).data;
    const result = searchResponse.slice(0, maxResults);

    if (result.length === 0)
      return api.sendMessage(`‚≠ï "${keyWord}" ‡¶ï‡¶ø‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶°‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶ï‡ßã‡¶®‡ßã ‡¶´‡¶≤‡¶æ‡¶´‡¶≤ ‡¶Æ‡ßá‡¶≤‡ßá‡¶®‡¶ø‡•§`, event.threadID, event.messageID);
    
    // ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡¶∞‡ßá‡¶ú‡¶æ‡¶≤‡ßç‡¶ü ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü ‡¶è‡¶¨‡¶Ç ‡¶•‡¶æ‡¶Æ‡ßç‡¶¨‡¶®‡ßá‡¶á‡¶≤ ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶°
    let msg = "üîé **‡¶Ö‡¶®‡ßÅ‡¶∏‡¶®‡ßç‡¶ß‡¶æ‡¶®‡ßá‡¶∞ ‡¶´‡¶≤‡¶æ‡¶´‡¶≤:**\n\n";
    let i = 1;
    const thumbnails = [];
    for (const info of result) {
      // diptoSt ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶ö‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶§‡ßà‡¶∞‡¶ø
      thumbnails.push(diptoSt(info.thumbnail, `photo_${i}.jpg`)); 
      msg += `${i++}. **${info.title}**\n‡¶∏‡¶Æ‡¶Ø‡¶º: ${info.time}\n‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤: ${info.channel.name}\n\n`;
    }

    // ‡¶Ö‡¶™‡¶∂‡¶®‡¶ó‡ßÅ‡¶≤‡ßã ‡¶•‡¶æ‡¶Æ‡ßç‡¶¨‡¶®‡ßá‡¶á‡¶≤ ‡¶∏‡¶π ‡¶∏‡ßá‡¶®‡ßç‡¶° ‡¶ï‡¶∞‡¶æ
    api.sendMessage({
      body: msg + "‡¶ó‡¶æ‡¶®‡¶ü‡¶ø ‡¶∂‡ßã‡¶®‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶è‡¶á ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú‡ßá ‡¶∞‡¶ø‡¶™‡ßç‡¶≤‡¶æ‡¶á ‡¶¶‡¶ø‡ßü‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ (1-6) ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®‡•§",
      attachment: await Promise.all(thumbnails)
    }, event.threadID, (err, info) => {
      if (err) return console.error("Error sending search results:", err);
      // ‡¶∞‡¶ø‡¶™‡ßç‡¶≤‡¶æ‡¶á ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞‡ßá‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡¶æ
      global.client.handleReply.push({
        name: this.config.name,
        messageID: info.messageID,
        author: event.senderID,
        result
      });
      
    }, event.messageID);

  } catch (err) {
    console.error("Error in 'song' run function:", err);
    // ‡¶Ø‡¶¶‡¶ø baseApiUrl ‡¶´‡ßá‡¶ö ‡¶ï‡¶∞‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶• ‡¶π‡ßü ‡¶¨‡¶æ ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶ï‡ßã‡¶®‡ßã ‡¶¨‡ßú ‡¶è‡¶∞‡¶∞ ‡¶π‡ßü
    if (err.message && err.message.includes("Could not fetch the base API URL")) {
      return api.sendMessage("‚ùå API URL ‡¶™‡ßá‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶™‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§", event.threadID, event.messageID);
    }
    return api.sendMessage("‚ùå ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶ï‡¶æ‡¶∞‡ßç‡¶Ø‡¶ï‡¶∞‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶™‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§", event.threadID, event.messageID);
  } finally {
    // ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶Ø‡ßá ‡¶∞‡¶æ‡¶® ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡ßá‡¶∞ ‡¶¨‡¶æ‡¶á‡¶∞‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶®‡¶Ü‡¶™ ‡¶π‡¶ö‡ßç‡¶õ‡ßá ‡¶®‡¶æ
    // ‡¶ï‡¶æ‡¶∞‡¶£ ‡¶è‡¶ü‡¶ø ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶∏‡ßá‡¶®‡ßç‡¶° ‡¶π‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶™‡¶∞ ‡¶π‡¶ì‡¶Ø‡¶º‡¶æ ‡¶â‡¶ö‡¶ø‡¶§ ‡¶Ø‡¶æ callback-‡¶è ‡¶Ü‡¶õ‡ßá‡•§
  }
};

// --- Reply Handler ---

module.exports.handleReply = async ({
  event,
  api,
  handleReply
}) => {
  const filePath = path.join(__dirname, 'audio.mp3');
  
  // ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§‡¶ï‡¶∞‡¶£‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶≤‡ßã‡¶ï‡¶æ‡¶≤ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶ï‡ßç‡¶≤‡¶ø‡¶®‡¶Ü‡¶™ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
  const cleanup = () => {
    if (fs.existsSync(filePath)) {
      try {
        fs.unlinkSync(filePath);
      } catch (e) {
        console.error("Failed to delete local file:", e.message);
      }
    }
  };

  // ‡¶ï‡ßá‡¶¨‡¶≤ ‡¶Æ‡ßÇ‡¶≤ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶∞ ‡¶∞‡¶ø‡¶™‡ßç‡¶≤‡¶æ‡¶á ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡ßü‡¶æ ‡¶ï‡¶∞‡¶¨‡ßá
  if (event.senderID !== handleReply.author) return; 

  try {
    const {
      result
    } = handleReply;
    const choice = parseInt(event.body.trim()); // ‡¶∞‡¶ø‡¶™‡ßç‡¶≤‡¶æ‡¶á‡ßü‡ßá‡¶∞ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ

    if (!isNaN(choice) && choice <= result.length && choice > 0) {
      const infoChoice = result[choice - 1];
      const idvideo = infoChoice.id;

      await api.unsendMessage(handleReply.messageID); // ‡¶∏‡¶ø‡¶≤‡ßá‡¶ï‡¶∂‡¶® ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶Ü‡¶®‡¶∏‡ßá‡¶®‡ßç‡¶° ‡¶ï‡¶∞‡¶æ
      await api.sendMessage(`üé∂ **${infoChoice.title}** ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶∏‡ßç‡¶§‡ßÅ‡¶§‡¶ø ‡¶ö‡¶≤‡¶õ‡ßá...`, event.threadID, event.messageID);
      
      const baseUrl = await baseApiUrl();
      const {
        data: {
          title,
          downloadLink,
          quality
        }
      } = await axios.get(`${baseUrl}/ytDl3?link=${idvideo}&format=mp3`);

      // ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶ø‡¶§ ‡¶Ö‡¶°‡¶ø‡¶ì ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶°
      const audioStream = await dipto(downloadLink, 'audio.mp3'); 

      // ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶Ö‡¶°‡¶ø‡¶ì ‡¶∏‡ßá‡¶®‡ßç‡¶°
      await api.sendMessage({
        body: `‚úÖ **‡¶ó‡¶æ‡¶® ‡¶ö‡¶≤‡¶õ‡ßá:**\n‚Ä¢ Title: **${title}**\n‚Ä¢ Quality: ${quality}`,
        attachment: audioStream
      }, event.threadID,
      () => {
        cleanup(); // ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶∏‡ßá‡¶®‡ßç‡¶° ‡¶π‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶™‡¶∞ ‡¶ï‡ßç‡¶≤‡¶ø‡¶®‡¶Ü‡¶™
      }, event.messageID);
      
    } else {
      // ‡¶≠‡ßÅ‡¶≤ ‡¶∏‡¶ø‡¶≤‡ßá‡¶ï‡¶∂‡¶®
      api.sendMessage("‚ùå ‡¶≠‡ßÅ‡¶≤ ‡¶∏‡¶ø‡¶≤‡ßá‡¶ï‡¶∂‡¶®‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá 1 ‡¶•‡ßá‡¶ï‡ßá 6 ‡¶è‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®‡•§", event.threadID, (err, info) => {
        // ‡¶∞‡¶ø‡¶™‡ßç‡¶≤‡¶æ‡¶á ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞ ‡¶∏‡¶ö‡¶≤ ‡¶∞‡¶æ‡¶ñ‡¶æ
        global.client.handleReply.push({
          name: handleReply.name,
          messageID: info.messageID,
          author: event.senderID,
          result
        });
      }, event.messageID);
    }
  } catch (error) {
    // ‡¶è‡¶∞‡¶∞ ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶ø‡¶Ç
    cleanup(); // ‡¶è‡¶∞‡¶∞ ‡¶π‡¶≤‡ßá‡¶ì ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Æ‡ßÅ‡¶õ‡¶æ

    if (error.message && error.message.includes('code 413')) { 
      // 413 Payload Too Large ‡¶è‡¶∞‡¶∞ (‡¶∏‡¶Æ‡ßç‡¶≠‡¶¨‡¶§ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶∏‡¶æ‡¶á‡¶ú ‡¶ñ‡ßÅ‡¶¨ ‡¶¨‡ßú)
      api.sendMessage("‚ùå ‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶ø‡¶§ ‡¶Ö‡¶°‡¶ø‡¶ì‡¶ü‡¶ø ‡¶Ö‡¶®‡ßá‡¶ï ‡¶¨‡¶°‡¶º (‡¶∏‡¶Æ‡ßç‡¶≠‡¶¨‡¶§ 26MB ‡¶è‡¶∞ ‡¶¨‡ßá‡¶∂‡¶ø) ‡¶π‡¶ì‡ßü‡¶æ‡ßü ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶Ø‡¶æ‡¶ö‡ßç‡¶õ‡ßá ‡¶®‡¶æ‡•§", event.threadID, event.messageID);
    } else {
      console.error("Error in 'song' handleReply:", error);
      api.sendMessage("‚≠ï ‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶∞‡ßã‡¶ß ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶è‡¶ï‡¶ü‡¶ø ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§", event.threadID, event.messageID);
    }
  }
};
