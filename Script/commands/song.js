const axios = require("axios");
const fs = require('fs');
const path = require('path'); // Path ржкрж░рж┐ржЪрж╛рж▓ржирж╛рж░ ржЬржирзНржп ржпрзЛржЧ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ

// --- Helper Functions ---

/**
 * GitHub ржерзЗржХрзЗ ржмрзЗрж╕ API URL ржлрзЗржЪ ржХрж░рзЗред
 * ржлрзЗржЗрж▓ рж╣рж▓рзЗ ржПржХржЯрж┐ ржлрж▓ржмрзНржпрж╛ржХ URL рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рзЗред
 * @returns {Promise<string>} ржмрзЗрж╕ API URL.
 */
const baseApiUrl = async () => {
    // ржлрж▓ржмрзНржпрж╛ржХ URL - ржпржжрж┐ GitHub ржерзЗржХрзЗ ржлрзЗржЪ ржХрж░рж╛ ржмрзНржпрж░рзНрже рж╣рзЯ
    const FALLBACK_API_URL = "https://your-fallback-api-url.com"; // <--- ржЖржкржирж╛рж░ ржкржЫржирзНржжрзЗрж░ API URL ржжрж┐ржи!

    try {
        const base = await axios.get(
            `https://raw.githubusercontent.com/Blankid018/D1PT0/main/baseApiUrl.json`,
            { timeout: 5000 } // рзл рж╕рзЗржХрзЗржирзНржбрзЗрж░ ржЯрж╛ржЗржоржЖржЙржЯ ржпрзЛржЧ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ
        );
        
        // Response ржарж┐ржХ ржЖржЫрзЗ ржХрж┐ржирж╛ рждрж╛ ржирж┐рж╢рзНржЪрж┐ржд ржХрж░рж╛
        if (base.data && base.data.api) {
            console.log("тЬЕ API URL fetched successfully from GitHub.");
            return base.data.api;
        } else {
            console.warn("тЪая╕П GitHub response was invalid. Falling back to default URL.");
            return FALLBACK_API_URL;
        }
    } catch (error) {
        // ржпржжрж┐ Fetch ржХрж░рждрзЗ ржПрж░рж░ рж╣рзЯ (ржпрзЗржоржи: ржирзЗржЯржУрзЯрж╛рж░рзНржХ ржмрж╛ DNS рж╕ржорж╕рзНржпрж╛)
        console.error("тЭМ Error fetching API URL from GitHub. Falling back:", error.message);
        // ржпржжрж┐ ржХрзЛржирзЛ ржХрж╛рж░ржгрзЗ ржлрзЗржЗрж▓ рж╣рзЯ, рждрж╛рж╣рж▓рзЗ ржлрж▓ржмрзНржпрж╛ржХ URL ржмрзНржпржмрж╣рж╛рж░ ржХрж░ржмрзЗ
        return FALLBACK_API_URL; 
    }
};

/**
 * ржПржХржЯрж┐ URL ржерзЗржХрзЗ ржлрж╛ржЗрж▓ ржбрж╛ржЙржирж▓рзЛржб ржХрж░рзЗ, рж▓рзЛржХрж╛рж▓ ржкрж╛ржерзЗ рж╕рзЗржн ржХрж░рзЗ, ржПржмржВ ржПржХржЯрж┐ рж░рж┐ржбрзЗржмрж▓ рж╕рзНржЯрзНрж░рж┐ржо рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рзЗред
 * ... (ржмрж╛ржХрж┐ ржлрж╛ржВрж╢ржиржЯрж┐ ржЕржкрж░рж┐ржмрж░рзНрждрж┐ржд) ...
 */
async function dipto(url, fileName) {
  const filePath = path.join(__dirname, fileName);
  try {
    // 1. ArrayBuffer рж╣рж┐рж╕рж╛ржмрзЗ ржбрж╛ржЙржирж▓рзЛржб
    const response = await axios.get(url, {
      responseType: "arraybuffer"
    });

    // 2. рж▓рзЛржХрж╛рж▓ ржлрж╛ржЗрж▓рзЗ рж╕рзЗржн
    fs.writeFileSync(filePath, Buffer.from(response.data));
    
    // 3. ReadStream рж░рж┐ржЯрж╛рж░рзНржи
    return fs.createReadStream(filePath);
  } catch (err) {
    // ржбрж╛ржЙржирж▓рзЛржб ржмрж╛ ржлрж╛ржЗрж▓ рж╕рзЗржнрж┐ржВ ржПрж░рж░ рж╣рж▓рзЗ
    console.error("Error in dipto (file download):", err.message);
    // ржПрж░рж░ ржерзНрж░рзЛ ржХрж░рж╛рж░ ржЖржЧрзЗ ржирж┐рж╢рзНржЪрж┐ржд ржХрж░рзБржи ржпрзЗ рж▓рзЛржХрж╛рж▓ ржлрж╛ржЗрж▓ржЯрж┐ ржорзБржЫрж╛ рж╣рзЯрзЗржЫрзЗ (ржпржжрж┐ ржЖржВрж╢рж┐ржХ ржбрж╛ржЙржирж▓рзЛржб рж╣рзЯрзЗ ржерж╛ржХрзЗ)
    if (fs.existsSync(filePath)) {
        fs.unlinkSync(filePath); 
    }
    throw err;
  }
}

/**
 * ржПржХржЯрж┐ URL ржерзЗржХрзЗ рж╕рзНржЯрзНрж░рж┐ржо рж╣рж┐рж╕рж╛ржмрзЗ ржлрж╛ржЗрж▓ ржбрж╛ржЙржирж▓рзЛржб ржХрж░рзЗ ржПржмржВ ржПрж░ path ржкрзНрж░ржкрж╛рж░рзНржЯрж┐ рж╕рзЗржЯ ржХрж░рзЗред
 * ... (ржмрж╛ржХрж┐ ржлрж╛ржВрж╢ржиржЯрж┐ ржЕржкрж░рж┐ржмрж░рзНрждрж┐ржд) ...
 */
async function diptoSt(url, fileName) {
  try {
    const response = await axios.get(url, {
      responseType: "stream"
    });
    // ржмржЯ ржлрзНрж░рзЗржоржУрзЯрж╛рж░рзНржХ ржмрзНржпржмрж╣рж╛рж░рзЗрж░ ржЬржирзНржп 'path' ржкрзНрж░ржкрж╛рж░рзНржЯрж┐ рж╕рзЗржЯ ржХрж░рж╛
    response.data.path = fileName; 
    return response.data;
  } catch (err) {
    console.error("Error in diptoSt (stream download):", err.message);
    throw err;
  }
}

// --- Module Configuration ---

module.exports.config = {
  name: "song",
  version: "2.1.3", // ржнрж╛рж░рзНрж╕ржи ржЖржкржбрзЗржЯ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ
  aliases: ["music", "play"],
  credits: "RAHAT (Fixed by Gemini)",
  countDown: 5,
  hasPermssion: 0,
  description: "Download audio from YouTube",
  category: "media",
  commandCategory: "media",
  usePrefix: true,
  prefix: true,
  usages: "{pn} [<song name>|<song link>]:" + "\n   Example:" + "\n{pn} chipi chipi chapa chapa"
};

// --- Run Function (Main Command Logic) ---

module.exports.run = async ({
  api,
  args,
  event,
  commandName,
  message
}) => {
  // YouTube URL рж░рзЗржЬрзЗржХрзНрж╕ (regex)
  const checkurl = /^(?:https?:\/\/)?(?:m\.|www\.)?(?:youtu\.be\/|youtube\.com\/(?:embed\/|v\/|watch\?v=|watch\?.+&v=|shorts\/))((\w|-){11})(?:\S+)?$/;
  const filePath = path.join(__dirname, 'audio.mp3'); // рж▓рзЛржХрж╛рж▓ ржлрж╛ржЗрж▓ ржкрж╛рже

  // ржирж┐рж╢рзНржЪрж┐рждржХрж░ржгрзЗрж░ ржЬржирзНржп рж▓рзЛржХрж╛рж▓ ржлрж╛ржЗрж▓ ржХрзНрж▓рж┐ржиржЖржк ржлрж╛ржВрж╢ржи
  const cleanup = () => {
    if (fs.existsSync(filePath)) {
      try {
        fs.unlinkSync(filePath);
      } catch (e) {
        console.error("Failed to delete local file:", e.message);
      }
    }
  };

  try {
    const urlYtb = checkurl.test(args[0]);

    // ржпржжрж┐ рж╕рж░рж╛рж╕рж░рж┐ YouTube URL рж╣рзЯ
    if (urlYtb) {
      const match = args[0].match(checkurl);
      const videoID = match ? match[1] : null;

      if (!videoID) {
        return api.sendMessage("тЭМ ржкрзНрж░ржжрждрзНржд рж▓рж┐ржЩрзНржХ ржерзЗржХрзЗ ржнрж┐ржбрж┐ржУ ID ржмрзЗрж░ ржХрж░рж╛ ржпрж╛рзЯржирж┐ред", event.threadID, event.messageID);
      }
      
      const baseUrl = await baseApiUrl();
      
      // API ржерзЗржХрзЗ ржбрж╛ржЙржирж▓рзЛржб рж▓рж┐ржЩрзНржХ ржПржмржВ рждржерзНржп ржлрзЗржЪ
      const response = await axios.get(
        `${baseUrl}/ytDl3?link=${videoID}&format=mp3`
      );
      
      const { title, downloadLink, quality } = response.data;

      // ржбрж╛ржЙржирж▓рзЛржбрж┐ржВ ржорзЗрж╕рзЗржЬ
      await api.sendMessage({
        body: `тЬЕ ржбрж╛ржЙржирж▓рзЛржб рж╣ржЪрзНржЫрзЗ: ${title}\nтАв Quality: ${quality}`,
      }, event.threadID, event.messageID);
      
      // dipto ржлрж╛ржВрж╢ржи ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржбрж╛ржЙржирж▓рзЛржб ржПржмржВ рж╕рзНржЯрзНрж░рж┐ржо рждрзИрж░рж┐
      const audioStream = await dipto(downloadLink, 'audio.mp3'); 

      // ржЕржбрж┐ржУ ржлрж╛ржЗрж▓ рж╕рзЗржирзНржб ржПржмржВ ржХрзНрж▓рж┐ржиржЖржк
      return api.sendMessage({
        body: title,
        attachment: audioStream
      }, event.threadID, () => {
        cleanup(); // ржорзЗрж╕рзЗржЬ рж╕рзЗржирзНржб рж╣ржУржпрж╝рж╛рж░ ржкрж░ ржХрзНрж▓рж┐ржиржЖржк
      }, event.messageID);
    }

    // ржпржжрж┐ ржХрж┐ржУржпрж╝рж╛рж░рзНржб ржжрж┐ржпрж╝рзЗ рж╕рж╛рж░рзНржЪ ржХрж░рж╛ рж╣ржпрж╝
    let keyWord = args.join(" ");
    if (!keyWord) {
      return api.sendMessage(`ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЧрж╛ржи ржмрж╛ YouTube рж▓рж┐ржЩрзНржХ ржжрж┐ржиред\nржмрзНржпржмрж╣рж╛рж░: ${this.config.usages.replace(/{pn}/g, commandName)}`, event.threadID, event.messageID);
    }

    keyWord = keyWord.includes("?feature=share") ? keyWord.replace("?feature=share", "") : keyWord;
    const maxResults = 6;
    const baseUrl = await baseApiUrl();
    
    // ржЧрж╛ржи рж╕рж╛рж░рзНржЪ ржХрж░рж╛
    const searchResponse = (await axios.get(`${baseUrl}/ytFullSearch?songName=${encodeURIComponent(keyWord)}`)).data;
    const result = searchResponse.slice(0, maxResults);

    if (result.length === 0)
      return api.sendMessage(`тнХ "${keyWord}" ржХрж┐ржУржпрж╝рж╛рж░рзНржбрзЗрж░ рж╕рж╛ржерзЗ ржХрзЛржирзЛ ржлрж▓рж╛ржлрж▓ ржорзЗрж▓рзЗржирж┐ред`, event.threadID, event.messageID);
    
    // рж╕рж╛рж░рзНржЪ рж░рзЗржЬрж╛рж▓рзНржЯ ржлрж░ржорзНржпрж╛ржЯ ржПржмржВ ржерж╛ржорзНржмржирзЗржЗрж▓ рж╕рзНржЯрзНрж░рж┐ржо ржбрж╛ржЙржирж▓рзЛржб
    let msg = "ЁЯФО **ржЕржирзБрж╕ржирзНржзрж╛ржирзЗрж░ ржлрж▓рж╛ржлрж▓:**\n\n";
    let i = 1;
    const thumbnails = [];
    for (const info of result) {
      // diptoSt ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ рж╕рзНржЯрзНрж░рж┐ржо ржЕрзНржпрж╛ржЯрж╛ржЪржорзЗржирзНржЯ рждрзИрж░рж┐
      thumbnails.push(diptoSt(info.thumbnail, `photo_${i}.jpg`)); 
      msg += `${i++}. **${info.title}**\nрж╕ржоржпрж╝: ${info.time}\nржЪрзНржпрж╛ржирзЗрж▓: ${info.channel.name}\n\n`;
    }

    // ржЕржкрж╢ржиржЧрзБрж▓рзЛ ржерж╛ржорзНржмржирзЗржЗрж▓ рж╕рж╣ рж╕рзЗржирзНржб ржХрж░рж╛
    api.sendMessage({
      body: msg + "ржЧрж╛ржиржЯрж┐ рж╢рзЛржирж╛рж░ ржЬржирзНржп ржПржЗ ржорзЗрж╕рзЗржЬрзЗ рж░рж┐ржкрзНрж▓рж╛ржЗ ржжрж┐рзЯрзЗ ржПржХржЯрж┐ рж╕ржВржЦрзНржпрж╛ (1-6) рж▓рж┐ржЦрзБржиред",
      attachment: await Promise.all(thumbnails)
    }, event.threadID, (err, info) => {
      if (err) return console.error("Error sending search results:", err);
      // рж░рж┐ржкрзНрж▓рж╛ржЗ рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░рзЗрж░ рждржерзНржп рж╕рзЗржн ржХрж░рж╛
      global.client.handleReply.push({
        name: this.config.name,
        messageID: info.messageID,
        author: event.senderID,
        result
      });
      
    }, event.messageID);

  } catch (err) {
    console.error("Error in 'song' run function:", err);
    // API рж░рзЗрж╕ржкржирзНрж╕ ржПрж░рж░ рж╣рж▓рзЗ
    if (err.response && err.response.status === 404) {
         return api.sendMessage("тЭМ API ржмрж╛ рж╕рж╛рж░рзНржнрж╛рж░ ржерзЗржХрзЗ ржХрзЛржирзЛ ржбрзЗржЯрж╛ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐ред ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржкрж░рзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред", event.threadID, event.messageID);
    }
    // ржлрж▓ржмрзНржпрж╛ржХ URL ржмрзНржпржмрж╣рж╛рж░рзЗрж░ ржкрж░рзЗржУ ржпржжрж┐ ржХрзЛржирзЛ ржПрж░рж░ рж╣рзЯ
    return api.sendMessage("тЭМ ржХржорж╛ржирзНржб ржХрж╛рж░рзНржпржХрж░рзЗ ржПржХржЯрж┐ рж╕рж╛ржзрж╛рж░ржг рждрзНрж░рзБржЯрж┐ рж╣ржпрж╝рзЗржЫрзЗред рж╕ржорж╕рзНржпрж╛ржЯрж┐ ржирзЗржЯржУржпрж╝рж╛рж░рзНржХ ржмрж╛ API ржПрж░ рж╣рждрзЗ ржкрж╛рж░рзЗред", event.threadID, event.messageID);
  } 
};

// --- Reply Handler ---

module.exports.handleReply = async ({
  event,
  api,
  handleReply
}) => {
  const filePath = path.join(__dirname, 'audio.mp3');
  
  // ржирж┐рж╢рзНржЪрж┐рждржХрж░ржгрзЗрж░ ржЬржирзНржп рж▓рзЛржХрж╛рж▓ ржлрж╛ржЗрж▓ ржХрзНрж▓рж┐ржиржЖржк ржлрж╛ржВрж╢ржи
  const cleanup = () => {
    if (fs.existsSync(filePath)) {
      try {
        fs.unlinkSync(filePath);
      } catch (e) {
        console.error("Failed to delete local file:", e.message);
      }
    }
  };

  // ржХрзЗржмрж▓ ржорзВрж▓ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАрж░ рж░рж┐ржкрзНрж▓рж╛ржЗ ржкрзНрж░ржХрзНрж░рж┐рзЯрж╛ ржХрж░ржмрзЗ
  if (event.senderID !== handleReply.author) return; 

  try {
    const {
      result
    } = handleReply;
    const choice = parseInt(event.body.trim()); // рж░рж┐ржкрзНрж▓рж╛ржЗрзЯрзЗрж░ рж╕ржВржЦрзНржпрж╛

    if (!isNaN(choice) && choice <= result.length && choice > 0) {
      const infoChoice = result[choice - 1];
      const idvideo = infoChoice.id;

      await api.unsendMessage(handleReply.messageID); // рж╕рж┐рж▓рзЗржХрж╢ржи ржорзЗрж╕рзЗржЬ ржЖржирж╕рзЗржирзНржб ржХрж░рж╛
      await api.sendMessage(`ЁЯО╢ **${infoChoice.title}** ржбрж╛ржЙржирж▓рзЛржб ржХрж░рж╛рж░ ржкрзНрж░рж╕рзНрждрзБрждрж┐ ржЪрж▓ржЫрзЗ...`, event.threadID, event.messageID);
      
      const baseUrl = await baseApiUrl();
      const response = await axios.get(`${baseUrl}/ytDl3?link=${idvideo}&format=mp3`);
      
      const { title, downloadLink, quality } = response.data;

      // ржирж┐рж░рзНржмрж╛ржЪрж┐ржд ржЕржбрж┐ржУ ржбрж╛ржЙржирж▓рзЛржб
      const audioStream = await dipto(downloadLink, 'audio.mp3'); 

      // ржбрж╛ржЙржирж▓рзЛржб ржХрж░рж╛ ржЕржбрж┐ржУ рж╕рзЗржирзНржб
      await api.sendMessage({
        body: `тЬЕ **ржЧрж╛ржи ржЪрж▓ржЫрзЗ:**\nтАв Title: **${title}**\nтАв Quality: ${quality}`,
        attachment: audioStream
      }, event.threadID,
      () => {
        cleanup(); // ржорзЗрж╕рзЗржЬ рж╕рзЗржирзНржб рж╣ржУржпрж╝рж╛рж░ ржкрж░ ржХрзНрж▓рж┐ржиржЖржк
      }, event.messageID);
      
    } else {
      // ржнрзБрж▓ рж╕рж┐рж▓рзЗржХрж╢ржи
      api.sendMessage("тЭМ ржнрзБрж▓ рж╕рж┐рж▓рзЗржХрж╢ржиред ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ 1 ржерзЗржХрзЗ 6 ржПрж░ ржоржзрзНржпрзЗ ржПржХржЯрж┐ рж╕ржВржЦрзНржпрж╛ рж▓рж┐ржЦрзБржиред", event.threadID, (err, info) => {
        // рж░рж┐ржкрзНрж▓рж╛ржЗ рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ рж╕ржЪрж▓ рж░рж╛ржЦрж╛
        global.client.handleReply.push({
          name: handleReply.name,
          messageID: info.messageID,
          author: event.senderID,
          result
        });
      }, event.messageID);
    }
  } catch (error) {
    // ржПрж░рж░ рж╣рзНржпрж╛ржирзНржбрж▓рж┐ржВ
    cleanup(); // ржПрж░рж░ рж╣рж▓рзЗржУ ржлрж╛ржЗрж▓ ржорзБржЫрж╛

    if (error.message && error.message.includes('code 413')) { 
      // 413 Payload Too Large ржПрж░рж░ (рж╕ржорзНржнржмржд ржлрж╛ржЗрж▓ рж╕рж╛ржЗржЬ ржЦрзБржм ржмрзЬ)
      api.sendMessage("тЭМ ржжрзБржГржЦрж┐ржд, ржирж┐рж░рзНржмрж╛ржЪрж┐ржд ржЕржбрж┐ржУржЯрж┐ ржЕржирзЗржХ ржмржбрж╝ (рж╕ржорзНржнржмржд 26MB ржПрж░ ржмрзЗрж╢рж┐) рж╣ржУрзЯрж╛рзЯ ржкрж╛ржарж╛ржирзЛ ржпрж╛ржЪрзНржЫрзЗ ржирж╛ред", event.threadID, event.messageID);
    } else {
      console.error("Error in 'song' handleReply:", error);
      api.sendMessage("тнХ ржжрзБржГржЦрж┐ржд, ржЖржкржирж╛рж░ ржЕржирзБрж░рзЛржз ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ ржХрж░рж╛рж░ рж╕ржоржпрж╝ ржПржХржЯрж┐ рждрзНрж░рзБржЯрж┐ рж╣ржпрж╝рзЗржЫрзЗред", event.threadID, event.messageID);
    }
  }
};
